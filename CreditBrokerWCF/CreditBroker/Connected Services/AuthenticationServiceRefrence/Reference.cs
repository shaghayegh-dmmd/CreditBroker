//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CreditBroker.AuthenticationServiceRefrence {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogInResponse", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class LogInResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisposableCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CreditBroker.AuthenticationServiceRefrence.ResultEnum ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisposableCode {
            get {
                return this.DisposableCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.DisposableCodeField, value) != true)) {
                    this.DisposableCodeField = value;
                    this.RaisePropertyChanged("DisposableCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobileNumber {
            get {
                return this.MobileNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileNumberField, value) != true)) {
                    this.MobileNumberField = value;
                    this.RaisePropertyChanged("MobileNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CreditBroker.AuthenticationServiceRefrence.ResultEnum Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultEnum", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    public enum ResultEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WrongUserPass = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeactiveAccount = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NeedCode = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LockedAccount = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserStatus", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    public enum UserStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActiveUnlock = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeactiveUnlock = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActiveLock = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeactiveLock = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PasswordChaneResult", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    public enum PasswordChaneResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SuccessAndMessageNotSent = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncorrectOldPass = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnacceptablePass = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainSecurityUser", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class MainSecurityUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonnelCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeActive {
            get {
                return this.IsDeActiveField;
            }
            set {
                if ((this.IsDeActiveField.Equals(value) != true)) {
                    this.IsDeActiveField = value;
                    this.RaisePropertyChanged("IsDeActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonnelCode {
            get {
                return this.PersonnelCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonnelCodeField, value) != true)) {
                    this.PersonnelCodeField = value;
                    this.RaisePropertyChanged("PersonnelCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateUserResult", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    public enum UpdateUserResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SuccessAndMessageNotSent = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMobileNumber = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenerateUserResult", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    public enum GenerateUserResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SuccessAndMessageNotSent = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RepeatedUserName = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RepeatedPersonnelCode = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidMobileNumber = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainSecurityApplication", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class MainSecurityApplication : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppDescription {
            get {
                return this.AppDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.AppDescriptionField, value) != true)) {
                    this.AppDescriptionField = value;
                    this.RaisePropertyChanged("AppDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainSecurityAction", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class MainSecurityAction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionDescription {
            get {
                return this.ActionDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionDescriptionField, value) != true)) {
                    this.ActionDescriptionField = value;
                    this.RaisePropertyChanged("ActionDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionName {
            get {
                return this.ActionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionNameField, value) != true)) {
                    this.ActionNameField = value;
                    this.RaisePropertyChanged("ActionName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainSecurityRole", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class MainSecurityRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDescription {
            get {
                return this.RoleDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDescriptionField, value) != true)) {
                    this.RoleDescriptionField = value;
                    this.RaisePropertyChanged("RoleDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName {
            get {
                return this.RoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleNameField, value) != true)) {
                    this.RoleNameField = value;
                    this.RaisePropertyChanged("RoleName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogData", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class LogData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EventDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventDescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EventDate {
            get {
                return this.EventDateField;
            }
            set {
                if ((this.EventDateField.Equals(value) != true)) {
                    this.EventDateField = value;
                    this.RaisePropertyChanged("EventDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventDescription {
            get {
                return this.EventDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.EventDescriptionField, value) != true)) {
                    this.EventDescriptionField = value;
                    this.RaisePropertyChanged("EventDescription");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TreeMenuModel", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class TreeMenuModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CreditBroker.AuthenticationServiceRefrence.TreeMenuModel[] ChildrenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasChildrenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IconField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CreditBroker.AuthenticationServiceRefrence.TreeMenuModel[] Children {
            get {
                return this.ChildrenField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildrenField, value) != true)) {
                    this.ChildrenField = value;
                    this.RaisePropertyChanged("Children");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasChildren {
            get {
                return this.HasChildrenField;
            }
            set {
                if ((this.HasChildrenField.Equals(value) != true)) {
                    this.HasChildrenField = value;
                    this.RaisePropertyChanged("HasChildren");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Icon {
            get {
                return this.IconField;
            }
            set {
                if ((object.ReferenceEquals(this.IconField, value) != true)) {
                    this.IconField = value;
                    this.RaisePropertyChanged("Icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TreeMenuStatusModel", Namespace="http://schemas.datacontract.org/2004/07/ESS.Authentication.DAL.Model")]
    [System.SerializableAttribute()]
    public partial class TreeMenuStatusModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TreeChildNodeToExpandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TreeRootNodeToExpandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TreeURLField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TreeChildNodeToExpand {
            get {
                return this.TreeChildNodeToExpandField;
            }
            set {
                if ((this.TreeChildNodeToExpandField.Equals(value) != true)) {
                    this.TreeChildNodeToExpandField = value;
                    this.RaisePropertyChanged("TreeChildNodeToExpand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TreeRootNodeToExpand {
            get {
                return this.TreeRootNodeToExpandField;
            }
            set {
                if ((this.TreeRootNodeToExpandField.Equals(value) != true)) {
                    this.TreeRootNodeToExpandField = value;
                    this.RaisePropertyChanged("TreeRootNodeToExpand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TreeURL {
            get {
                return this.TreeURLField;
            }
            set {
                if ((object.ReferenceEquals(this.TreeURLField, value) != true)) {
                    this.TreeURLField = value;
                    this.RaisePropertyChanged("TreeURL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthenticationServiceRefrence.IAuthenticationService")]
    public interface IAuthenticationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserLogInWithPass", ReplyAction="http://tempuri.org/IAuthenticationService/UserLogInWithPassResponse")]
        CreditBroker.AuthenticationServiceRefrence.LogInResponse UserLogInWithPass(string user, string password, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserLogInWithPass", ReplyAction="http://tempuri.org/IAuthenticationService/UserLogInWithPassResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.LogInResponse> UserLogInWithPassAsync(string user, string password, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserUnlock", ReplyAction="http://tempuri.org/IAuthenticationService/UserUnlockResponse")]
        bool UserUnlock(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserUnlock", ReplyAction="http://tempuri.org/IAuthenticationService/UserUnlockResponse")]
        System.Threading.Tasks.Task<bool> UserUnlockAsync(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserStatus", ReplyAction="http://tempuri.org/IAuthenticationService/UserStatusResponse")]
        CreditBroker.AuthenticationServiceRefrence.UserStatus UserStatus(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserStatus", ReplyAction="http://tempuri.org/IAuthenticationService/UserStatusResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.UserStatus> UserStatusAsync(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserActivate", ReplyAction="http://tempuri.org/IAuthenticationService/UserActivateResponse")]
        bool UserActivate(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserActivate", ReplyAction="http://tempuri.org/IAuthenticationService/UserActivateResponse")]
        System.Threading.Tasks.Task<bool> UserActivateAsync(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserDeActivate", ReplyAction="http://tempuri.org/IAuthenticationService/UserDeActivateResponse")]
        bool UserDeActivate(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserDeActivate", ReplyAction="http://tempuri.org/IAuthenticationService/UserDeActivateResponse")]
        System.Threading.Tasks.Task<bool> UserDeActivateAsync(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserResetPassword", ReplyAction="http://tempuri.org/IAuthenticationService/UserResetPasswordResponse")]
        bool UserResetPassword(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserResetPassword", ReplyAction="http://tempuri.org/IAuthenticationService/UserResetPasswordResponse")]
        System.Threading.Tasks.Task<bool> UserResetPasswordAsync(string user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserChangePassword", ReplyAction="http://tempuri.org/IAuthenticationService/UserChangePasswordResponse")]
        CreditBroker.AuthenticationServiceRefrence.PasswordChaneResult UserChangePassword(string user, string oldPassword, string newPassword, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserChangePassword", ReplyAction="http://tempuri.org/IAuthenticationService/UserChangePasswordResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.PasswordChaneResult> UserChangePasswordAsync(string user, string oldPassword, string newPassword, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserUpdateData", ReplyAction="http://tempuri.org/IAuthenticationService/UserUpdateDataResponse")]
        CreditBroker.AuthenticationServiceRefrence.UpdateUserResult UserUpdateData(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserUpdateData", ReplyAction="http://tempuri.org/IAuthenticationService/UserUpdateDataResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.UpdateUserResult> UserUpdateDataAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGenerateNew", ReplyAction="http://tempuri.org/IAuthenticationService/UserGenerateNewResponse")]
        CreditBroker.AuthenticationServiceRefrence.GenerateUserResult UserGenerateNew(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGenerateNew", ReplyAction="http://tempuri.org/IAuthenticationService/UserGenerateNewResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.GenerateUserResult> UserGenerateNewAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetFullList", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetFullListResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetFullList(string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetFullList", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetFullListResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetFullListAsync(string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRole", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRoleResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetAppListOfRole(string roleName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRole", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRoleResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetAppListOfRoleAsync(string roleName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRoleOfUser", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRoleOfUserRespon" +
            "se")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetAppListOfRoleOfUser(string roleName, string userName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRoleOfUser", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfRoleOfUserRespon" +
            "se")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetAppListOfRoleOfUserAsync(string roleName, string userName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfUser", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfUserResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetAppListOfUser(string userName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfUser", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationGetAppListOfUserResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetAppListOfUserAsync(string userName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationAddNew", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationAddNewResponse")]
        bool ApplicationAddNew(CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication app, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ApplicationAddNew", ReplyAction="http://tempuri.org/IAuthenticationService/ApplicationAddNewResponse")]
        System.Threading.Tasks.Task<bool> ApplicationAddNewAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication app, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetData", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetDataResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityUser UserGetData(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetData", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetDataResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser> UserGetDataAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetFullList", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetFullListResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetFullList(string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetFullList", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetFullListResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetFullListAsync(string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetListOfApplication", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetListOfApplicationResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetListOfApplication(string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetListOfApplication", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetListOfApplicationResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetListOfApplicationAsync(string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetListOfAppRole", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetListOfAppRoleResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetListOfAppRole(string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetListOfAppRole", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetListOfAppRoleResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetListOfAppRoleAsync(string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetListOfApplicationAnyMode", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetListOfApplicationAnyModeResponse" +
            "")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetListOfApplicationAnyMode(string appStartName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/UserGetListOfApplicationAnyMode", ReplyAction="http://tempuri.org/IAuthenticationService/UserGetListOfApplicationAnyModeResponse" +
            "")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetListOfApplicationAnyModeAsync(string appStartName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetUserActions", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetUserActionsResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetUserActions(string user, string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetUserActions", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetUserActionsResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetUserActionsAsync(string user, string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetUserRoles", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetUserRolesResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[] AcGetUserRoles(string user, string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetUserRoles", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetUserRolesResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[]> AcGetUserRolesAsync(string user, string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetAllRoles", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetAllRolesResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[] AcGetAllRoles(string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetAllRoles", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetAllRolesResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[]> AcGetAllRolesAsync(string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetAllActions", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetAllActionsResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetAllActions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetAllActions", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetAllActionsResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetAllActionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetActionsOfRole", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetActionsOfRoleResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetActionsOfRole(string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetActionsOfRole", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetActionsOfRoleResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetActionsOfRoleAsync(string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetUserActionsOfRole", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetUserActionsOfRoleResponse")]
        CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetUserActionsOfRole(string user, string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcGetUserActionsOfRole", ReplyAction="http://tempuri.org/IAuthenticationService/AcGetUserActionsOfRoleResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetUserActionsOfRoleAsync(string user, string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcIsUserInRole", ReplyAction="http://tempuri.org/IAuthenticationService/AcIsUserInRoleResponse")]
        bool AcIsUserInRole(string user, string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcIsUserInRole", ReplyAction="http://tempuri.org/IAuthenticationService/AcIsUserInRoleResponse")]
        System.Threading.Tasks.Task<bool> AcIsUserInRoleAsync(string user, string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcIsUserHaveAction", ReplyAction="http://tempuri.org/IAuthenticationService/AcIsUserHaveActionResponse")]
        bool AcIsUserHaveAction(string user, string appName, string actionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcIsUserHaveAction", ReplyAction="http://tempuri.org/IAuthenticationService/AcIsUserHaveActionResponse")]
        System.Threading.Tasks.Task<bool> AcIsUserHaveActionAsync(string user, string appName, string actionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcRoleExists", ReplyAction="http://tempuri.org/IAuthenticationService/AcRoleExistsResponse")]
        bool AcRoleExists(string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AcRoleExists", ReplyAction="http://tempuri.org/IAuthenticationService/AcRoleExistsResponse")]
        System.Threading.Tasks.Task<bool> AcRoleExistsAsync(string appName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArAddRolesToUsers", ReplyAction="http://tempuri.org/IAuthenticationService/ArAddRolesToUsersResponse")]
        void ArAddRolesToUsers(string appName, string[] userNames, string[] roleNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArAddRolesToUsers", ReplyAction="http://tempuri.org/IAuthenticationService/ArAddRolesToUsersResponse")]
        System.Threading.Tasks.Task ArAddRolesToUsersAsync(string appName, string[] userNames, string[] roleNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArAddActionsToRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArAddActionsToRoleResponse")]
        void ArAddActionsToRole(string appName, string roleName, string[] actionNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArAddActionsToRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArAddActionsToRoleResponse")]
        System.Threading.Tasks.Task ArAddActionsToRoleAsync(string appName, string roleName, string[] actionNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArCreateAction", ReplyAction="http://tempuri.org/IAuthenticationService/ArCreateActionResponse")]
        void ArCreateAction(CreditBroker.AuthenticationServiceRefrence.MainSecurityAction action, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArCreateAction", ReplyAction="http://tempuri.org/IAuthenticationService/ArCreateActionResponse")]
        System.Threading.Tasks.Task ArCreateActionAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityAction action, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArCreateRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArCreateRoleResponse")]
        void ArCreateRole(string appName, CreditBroker.AuthenticationServiceRefrence.MainSecurityRole role, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArCreateRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArCreateRoleResponse")]
        System.Threading.Tasks.Task ArCreateRoleAsync(string appName, CreditBroker.AuthenticationServiceRefrence.MainSecurityRole role, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArDeleteAction", ReplyAction="http://tempuri.org/IAuthenticationService/ArDeleteActionResponse")]
        void ArDeleteAction(string actionName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArDeleteAction", ReplyAction="http://tempuri.org/IAuthenticationService/ArDeleteActionResponse")]
        System.Threading.Tasks.Task ArDeleteActionAsync(string actionName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArDeleteRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArDeleteRoleResponse")]
        void ArDeleteRole(string appName, string roleName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArDeleteRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArDeleteRoleResponse")]
        System.Threading.Tasks.Task ArDeleteRoleAsync(string appName, string roleName, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArRemoveRolesFromUser", ReplyAction="http://tempuri.org/IAuthenticationService/ArRemoveRolesFromUserResponse")]
        void ArRemoveRolesFromUser(string appName, string userName, string[] roleNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArRemoveRolesFromUser", ReplyAction="http://tempuri.org/IAuthenticationService/ArRemoveRolesFromUserResponse")]
        System.Threading.Tasks.Task ArRemoveRolesFromUserAsync(string appName, string userName, string[] roleNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArRemoveActionsFromRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArRemoveActionsFromRoleResponse")]
        void ArRemoveActionsFromRole(string appName, string roleName, string[] actionNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/ArRemoveActionsFromRole", ReplyAction="http://tempuri.org/IAuthenticationService/ArRemoveActionsFromRoleResponse")]
        System.Threading.Tasks.Task ArRemoveActionsFromRoleAsync(string appName, string roleName, string[] actionNames, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/LogGetFull", ReplyAction="http://tempuri.org/IAuthenticationService/LogGetFullResponse")]
        CreditBroker.AuthenticationServiceRefrence.LogData[] LogGetFull(System.DateTime from, System.DateTime to, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/LogGetFull", ReplyAction="http://tempuri.org/IAuthenticationService/LogGetFullResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.LogData[]> LogGetFullAsync(System.DateTime from, System.DateTime to, string autKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/TreeGetUserMenu", ReplyAction="http://tempuri.org/IAuthenticationService/TreeGetUserMenuResponse")]
        CreditBroker.AuthenticationServiceRefrence.TreeMenuModel[] TreeGetUserMenu(string appName, string userName, string urlContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/TreeGetUserMenu", ReplyAction="http://tempuri.org/IAuthenticationService/TreeGetUserMenuResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.TreeMenuModel[]> TreeGetUserMenuAsync(string appName, string userName, string urlContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/TreeGetUserStatus", ReplyAction="http://tempuri.org/IAuthenticationService/TreeGetUserStatusResponse")]
        CreditBroker.AuthenticationServiceRefrence.TreeMenuStatusModel TreeGetUserStatus(string appName, string userName, string treeUrl, string urlContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/TreeGetUserStatus", ReplyAction="http://tempuri.org/IAuthenticationService/TreeGetUserStatusResponse")]
        System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.TreeMenuStatusModel> TreeGetUserStatusAsync(string appName, string userName, string treeUrl, string urlContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/TreeClearMenuCache", ReplyAction="http://tempuri.org/IAuthenticationService/TreeClearMenuCacheResponse")]
        void TreeClearMenuCache(string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/TreeClearMenuCache", ReplyAction="http://tempuri.org/IAuthenticationService/TreeClearMenuCacheResponse")]
        System.Threading.Tasks.Task TreeClearMenuCacheAsync(string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/VersionConfirm", ReplyAction="http://tempuri.org/IAuthenticationService/VersionConfirmResponse")]
        string VersionConfirm(string versionKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/VersionConfirm", ReplyAction="http://tempuri.org/IAuthenticationService/VersionConfirmResponse")]
        System.Threading.Tasks.Task<string> VersionConfirmAsync(string versionKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationServiceChannel : CreditBroker.AuthenticationServiceRefrence.IAuthenticationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationServiceClient : System.ServiceModel.ClientBase<CreditBroker.AuthenticationServiceRefrence.IAuthenticationService>, CreditBroker.AuthenticationServiceRefrence.IAuthenticationService {
        
        public AuthenticationServiceClient() {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CreditBroker.AuthenticationServiceRefrence.LogInResponse UserLogInWithPass(string user, string password, string autKey) {
            return base.Channel.UserLogInWithPass(user, password, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.LogInResponse> UserLogInWithPassAsync(string user, string password, string autKey) {
            return base.Channel.UserLogInWithPassAsync(user, password, autKey);
        }
        
        public bool UserUnlock(string user, string autKey) {
            return base.Channel.UserUnlock(user, autKey);
        }
        
        public System.Threading.Tasks.Task<bool> UserUnlockAsync(string user, string autKey) {
            return base.Channel.UserUnlockAsync(user, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.UserStatus UserStatus(string user, string autKey) {
            return base.Channel.UserStatus(user, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.UserStatus> UserStatusAsync(string user, string autKey) {
            return base.Channel.UserStatusAsync(user, autKey);
        }
        
        public bool UserActivate(string user, string autKey) {
            return base.Channel.UserActivate(user, autKey);
        }
        
        public System.Threading.Tasks.Task<bool> UserActivateAsync(string user, string autKey) {
            return base.Channel.UserActivateAsync(user, autKey);
        }
        
        public bool UserDeActivate(string user, string autKey) {
            return base.Channel.UserDeActivate(user, autKey);
        }
        
        public System.Threading.Tasks.Task<bool> UserDeActivateAsync(string user, string autKey) {
            return base.Channel.UserDeActivateAsync(user, autKey);
        }
        
        public bool UserResetPassword(string user, string autKey) {
            return base.Channel.UserResetPassword(user, autKey);
        }
        
        public System.Threading.Tasks.Task<bool> UserResetPasswordAsync(string user, string autKey) {
            return base.Channel.UserResetPasswordAsync(user, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.PasswordChaneResult UserChangePassword(string user, string oldPassword, string newPassword, string autKey) {
            return base.Channel.UserChangePassword(user, oldPassword, newPassword, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.PasswordChaneResult> UserChangePasswordAsync(string user, string oldPassword, string newPassword, string autKey) {
            return base.Channel.UserChangePasswordAsync(user, oldPassword, newPassword, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.UpdateUserResult UserUpdateData(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey) {
            return base.Channel.UserUpdateData(user, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.UpdateUserResult> UserUpdateDataAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey) {
            return base.Channel.UserUpdateDataAsync(user, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.GenerateUserResult UserGenerateNew(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey) {
            return base.Channel.UserGenerateNew(user, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.GenerateUserResult> UserGenerateNewAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityUser user, string autKey) {
            return base.Channel.UserGenerateNewAsync(user, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetFullList(string autKey) {
            return base.Channel.ApplicationGetFullList(autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetFullListAsync(string autKey) {
            return base.Channel.ApplicationGetFullListAsync(autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetAppListOfRole(string roleName, string autKey) {
            return base.Channel.ApplicationGetAppListOfRole(roleName, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetAppListOfRoleAsync(string roleName, string autKey) {
            return base.Channel.ApplicationGetAppListOfRoleAsync(roleName, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetAppListOfRoleOfUser(string roleName, string userName, string autKey) {
            return base.Channel.ApplicationGetAppListOfRoleOfUser(roleName, userName, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetAppListOfRoleOfUserAsync(string roleName, string userName, string autKey) {
            return base.Channel.ApplicationGetAppListOfRoleOfUserAsync(roleName, userName, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[] ApplicationGetAppListOfUser(string userName, string autKey) {
            return base.Channel.ApplicationGetAppListOfUser(userName, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication[]> ApplicationGetAppListOfUserAsync(string userName, string autKey) {
            return base.Channel.ApplicationGetAppListOfUserAsync(userName, autKey);
        }
        
        public bool ApplicationAddNew(CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication app, string autKey) {
            return base.Channel.ApplicationAddNew(app, autKey);
        }
        
        public System.Threading.Tasks.Task<bool> ApplicationAddNewAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityApplication app, string autKey) {
            return base.Channel.ApplicationAddNewAsync(app, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityUser UserGetData(string user) {
            return base.Channel.UserGetData(user);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser> UserGetDataAsync(string user) {
            return base.Channel.UserGetDataAsync(user);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetFullList(string autKey) {
            return base.Channel.UserGetFullList(autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetFullListAsync(string autKey) {
            return base.Channel.UserGetFullListAsync(autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetListOfApplication(string appName) {
            return base.Channel.UserGetListOfApplication(appName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetListOfApplicationAsync(string appName) {
            return base.Channel.UserGetListOfApplicationAsync(appName);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetListOfAppRole(string appName, string roleName) {
            return base.Channel.UserGetListOfAppRole(appName, roleName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetListOfAppRoleAsync(string appName, string roleName) {
            return base.Channel.UserGetListOfAppRoleAsync(appName, roleName);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[] UserGetListOfApplicationAnyMode(string appStartName) {
            return base.Channel.UserGetListOfApplicationAnyMode(appStartName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityUser[]> UserGetListOfApplicationAnyModeAsync(string appStartName) {
            return base.Channel.UserGetListOfApplicationAnyModeAsync(appStartName);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetUserActions(string user, string appName) {
            return base.Channel.AcGetUserActions(user, appName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetUserActionsAsync(string user, string appName) {
            return base.Channel.AcGetUserActionsAsync(user, appName);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[] AcGetUserRoles(string user, string appName) {
            return base.Channel.AcGetUserRoles(user, appName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[]> AcGetUserRolesAsync(string user, string appName) {
            return base.Channel.AcGetUserRolesAsync(user, appName);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[] AcGetAllRoles(string appName) {
            return base.Channel.AcGetAllRoles(appName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityRole[]> AcGetAllRolesAsync(string appName) {
            return base.Channel.AcGetAllRolesAsync(appName);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetAllActions() {
            return base.Channel.AcGetAllActions();
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetAllActionsAsync() {
            return base.Channel.AcGetAllActionsAsync();
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetActionsOfRole(string appName, string roleName) {
            return base.Channel.AcGetActionsOfRole(appName, roleName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetActionsOfRoleAsync(string appName, string roleName) {
            return base.Channel.AcGetActionsOfRoleAsync(appName, roleName);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[] AcGetUserActionsOfRole(string user, string appName, string roleName) {
            return base.Channel.AcGetUserActionsOfRole(user, appName, roleName);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.MainSecurityAction[]> AcGetUserActionsOfRoleAsync(string user, string appName, string roleName) {
            return base.Channel.AcGetUserActionsOfRoleAsync(user, appName, roleName);
        }
        
        public bool AcIsUserInRole(string user, string appName, string roleName) {
            return base.Channel.AcIsUserInRole(user, appName, roleName);
        }
        
        public System.Threading.Tasks.Task<bool> AcIsUserInRoleAsync(string user, string appName, string roleName) {
            return base.Channel.AcIsUserInRoleAsync(user, appName, roleName);
        }
        
        public bool AcIsUserHaveAction(string user, string appName, string actionName) {
            return base.Channel.AcIsUserHaveAction(user, appName, actionName);
        }
        
        public System.Threading.Tasks.Task<bool> AcIsUserHaveActionAsync(string user, string appName, string actionName) {
            return base.Channel.AcIsUserHaveActionAsync(user, appName, actionName);
        }
        
        public bool AcRoleExists(string appName, string roleName) {
            return base.Channel.AcRoleExists(appName, roleName);
        }
        
        public System.Threading.Tasks.Task<bool> AcRoleExistsAsync(string appName, string roleName) {
            return base.Channel.AcRoleExistsAsync(appName, roleName);
        }
        
        public void ArAddRolesToUsers(string appName, string[] userNames, string[] roleNames, string autKey) {
            base.Channel.ArAddRolesToUsers(appName, userNames, roleNames, autKey);
        }
        
        public System.Threading.Tasks.Task ArAddRolesToUsersAsync(string appName, string[] userNames, string[] roleNames, string autKey) {
            return base.Channel.ArAddRolesToUsersAsync(appName, userNames, roleNames, autKey);
        }
        
        public void ArAddActionsToRole(string appName, string roleName, string[] actionNames, string autKey) {
            base.Channel.ArAddActionsToRole(appName, roleName, actionNames, autKey);
        }
        
        public System.Threading.Tasks.Task ArAddActionsToRoleAsync(string appName, string roleName, string[] actionNames, string autKey) {
            return base.Channel.ArAddActionsToRoleAsync(appName, roleName, actionNames, autKey);
        }
        
        public void ArCreateAction(CreditBroker.AuthenticationServiceRefrence.MainSecurityAction action, string autKey) {
            base.Channel.ArCreateAction(action, autKey);
        }
        
        public System.Threading.Tasks.Task ArCreateActionAsync(CreditBroker.AuthenticationServiceRefrence.MainSecurityAction action, string autKey) {
            return base.Channel.ArCreateActionAsync(action, autKey);
        }
        
        public void ArCreateRole(string appName, CreditBroker.AuthenticationServiceRefrence.MainSecurityRole role, string autKey) {
            base.Channel.ArCreateRole(appName, role, autKey);
        }
        
        public System.Threading.Tasks.Task ArCreateRoleAsync(string appName, CreditBroker.AuthenticationServiceRefrence.MainSecurityRole role, string autKey) {
            return base.Channel.ArCreateRoleAsync(appName, role, autKey);
        }
        
        public void ArDeleteAction(string actionName, string autKey) {
            base.Channel.ArDeleteAction(actionName, autKey);
        }
        
        public System.Threading.Tasks.Task ArDeleteActionAsync(string actionName, string autKey) {
            return base.Channel.ArDeleteActionAsync(actionName, autKey);
        }
        
        public void ArDeleteRole(string appName, string roleName, string autKey) {
            base.Channel.ArDeleteRole(appName, roleName, autKey);
        }
        
        public System.Threading.Tasks.Task ArDeleteRoleAsync(string appName, string roleName, string autKey) {
            return base.Channel.ArDeleteRoleAsync(appName, roleName, autKey);
        }
        
        public void ArRemoveRolesFromUser(string appName, string userName, string[] roleNames, string autKey) {
            base.Channel.ArRemoveRolesFromUser(appName, userName, roleNames, autKey);
        }
        
        public System.Threading.Tasks.Task ArRemoveRolesFromUserAsync(string appName, string userName, string[] roleNames, string autKey) {
            return base.Channel.ArRemoveRolesFromUserAsync(appName, userName, roleNames, autKey);
        }
        
        public void ArRemoveActionsFromRole(string appName, string roleName, string[] actionNames, string autKey) {
            base.Channel.ArRemoveActionsFromRole(appName, roleName, actionNames, autKey);
        }
        
        public System.Threading.Tasks.Task ArRemoveActionsFromRoleAsync(string appName, string roleName, string[] actionNames, string autKey) {
            return base.Channel.ArRemoveActionsFromRoleAsync(appName, roleName, actionNames, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.LogData[] LogGetFull(System.DateTime from, System.DateTime to, string autKey) {
            return base.Channel.LogGetFull(from, to, autKey);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.LogData[]> LogGetFullAsync(System.DateTime from, System.DateTime to, string autKey) {
            return base.Channel.LogGetFullAsync(from, to, autKey);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.TreeMenuModel[] TreeGetUserMenu(string appName, string userName, string urlContent) {
            return base.Channel.TreeGetUserMenu(appName, userName, urlContent);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.TreeMenuModel[]> TreeGetUserMenuAsync(string appName, string userName, string urlContent) {
            return base.Channel.TreeGetUserMenuAsync(appName, userName, urlContent);
        }
        
        public CreditBroker.AuthenticationServiceRefrence.TreeMenuStatusModel TreeGetUserStatus(string appName, string userName, string treeUrl, string urlContent) {
            return base.Channel.TreeGetUserStatus(appName, userName, treeUrl, urlContent);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.AuthenticationServiceRefrence.TreeMenuStatusModel> TreeGetUserStatusAsync(string appName, string userName, string treeUrl, string urlContent) {
            return base.Channel.TreeGetUserStatusAsync(appName, userName, treeUrl, urlContent);
        }
        
        public void TreeClearMenuCache(string appName) {
            base.Channel.TreeClearMenuCache(appName);
        }
        
        public System.Threading.Tasks.Task TreeClearMenuCacheAsync(string appName) {
            return base.Channel.TreeClearMenuCacheAsync(appName);
        }
        
        public string VersionConfirm(string versionKey) {
            return base.Channel.VersionConfirm(versionKey);
        }
        
        public System.Threading.Tasks.Task<string> VersionConfirmAsync(string versionKey) {
            return base.Channel.VersionConfirmAsync(versionKey);
        }
    }
}
