//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CreditBroker.RecordsServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecordsModel", Namespace="http://schemas.datacontract.org/2004/07/ICBS.RecordsCS.DAL.Models")]
    [System.SerializableAttribute()]
    public partial class RecordsModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomersVarietyCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LastCsStatusIsOkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NotOkCsCountInSixMonthsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NotOkCsCountOlderThanSixMonthsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OkCsCountInSixMonthsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OkCsCountOlderThanSixMonthsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomersVarietyCount {
            get {
                return this.CustomersVarietyCountField;
            }
            set {
                if ((this.CustomersVarietyCountField.Equals(value) != true)) {
                    this.CustomersVarietyCountField = value;
                    this.RaisePropertyChanged("CustomersVarietyCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LastCsStatusIsOk {
            get {
                return this.LastCsStatusIsOkField;
            }
            set {
                if ((this.LastCsStatusIsOkField.Equals(value) != true)) {
                    this.LastCsStatusIsOkField = value;
                    this.RaisePropertyChanged("LastCsStatusIsOk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NotOkCsCountInSixMonths {
            get {
                return this.NotOkCsCountInSixMonthsField;
            }
            set {
                if ((this.NotOkCsCountInSixMonthsField.Equals(value) != true)) {
                    this.NotOkCsCountInSixMonthsField = value;
                    this.RaisePropertyChanged("NotOkCsCountInSixMonths");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NotOkCsCountOlderThanSixMonths {
            get {
                return this.NotOkCsCountOlderThanSixMonthsField;
            }
            set {
                if ((this.NotOkCsCountOlderThanSixMonthsField.Equals(value) != true)) {
                    this.NotOkCsCountOlderThanSixMonthsField = value;
                    this.RaisePropertyChanged("NotOkCsCountOlderThanSixMonths");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OkCsCountInSixMonths {
            get {
                return this.OkCsCountInSixMonthsField;
            }
            set {
                if ((this.OkCsCountInSixMonthsField.Equals(value) != true)) {
                    this.OkCsCountInSixMonthsField = value;
                    this.RaisePropertyChanged("OkCsCountInSixMonths");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OkCsCountOlderThanSixMonths {
            get {
                return this.OkCsCountOlderThanSixMonthsField;
            }
            set {
                if ((this.OkCsCountOlderThanSixMonthsField.Equals(value) != true)) {
                    this.OkCsCountOlderThanSixMonthsField = value;
                    this.RaisePropertyChanged("OkCsCountOlderThanSixMonths");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RecordsServiceRef.IRecordsService")]
    public interface IRecordsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/GetRecords", ReplyAction="http://tempuri.org/IRecordsService/GetRecordsResponse")]
        CreditBroker.RecordsServiceRef.RecordsModel GetRecords(string nationalCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/GetRecords", ReplyAction="http://tempuri.org/IRecordsService/GetRecordsResponse")]
        System.Threading.Tasks.Task<CreditBroker.RecordsServiceRef.RecordsModel> GetRecordsAsync(string nationalCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRecordsService/AddHistory")]
        void AddHistory(string nationalCode, string customerEnName, int generalScore, bool generalDecisionStatus, System.DateTime requestDate, string restOfInfoXml);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRecordsService/AddHistory")]
        System.Threading.Tasks.Task AddHistoryAsync(string nationalCode, string customerEnName, int generalScore, bool generalDecisionStatus, System.DateTime requestDate, string restOfInfoXml);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecordsServiceChannel : CreditBroker.RecordsServiceRef.IRecordsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordsServiceClient : System.ServiceModel.ClientBase<CreditBroker.RecordsServiceRef.IRecordsService>, CreditBroker.RecordsServiceRef.IRecordsService {
        
        public RecordsServiceClient() {
        }
        
        public RecordsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecordsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecordsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CreditBroker.RecordsServiceRef.RecordsModel GetRecords(string nationalCode) {
            return base.Channel.GetRecords(nationalCode);
        }
        
        public System.Threading.Tasks.Task<CreditBroker.RecordsServiceRef.RecordsModel> GetRecordsAsync(string nationalCode) {
            return base.Channel.GetRecordsAsync(nationalCode);
        }
        
        public void AddHistory(string nationalCode, string customerEnName, int generalScore, bool generalDecisionStatus, System.DateTime requestDate, string restOfInfoXml) {
            base.Channel.AddHistory(nationalCode, customerEnName, generalScore, generalDecisionStatus, requestDate, restOfInfoXml);
        }
        
        public System.Threading.Tasks.Task AddHistoryAsync(string nationalCode, string customerEnName, int generalScore, bool generalDecisionStatus, System.DateTime requestDate, string restOfInfoXml) {
            return base.Channel.AddHistoryAsync(nationalCode, customerEnName, generalScore, generalDecisionStatus, requestDate, restOfInfoXml);
        }
    }
}
